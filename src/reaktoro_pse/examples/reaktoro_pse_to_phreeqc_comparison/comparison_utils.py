###############################################################################
# #################################################################################
# # WaterTAP Copyright (c) 2020-2024, The Regents of the University of California,
# # through Lawrence Berkeley National Laboratory, Oak Ridge National Laboratory,
# # National Renewable Energy Laboratory, and National Energy Technology
# # Laboratory (subject to receipt of any required approvals from the U.S. Dept.
# # of Energy). All rights reserved.
# #
# # Please see the files COPYRIGHT.md and LICENSE.md for full copyright and license
# # information, respectively. These files are also available online at the URL
# # "https://github.com/watertap-org/reaktoro-pse/"
# #################################################################################
###############################################################################
import matplotlib.pyplot as plt
import json

import numpy as np
import os
import pathlib
import reaktoro_pse

__author__ = "Alexander Dudchenko"


def get_phreeqc_data():
    """get data generated by phreeqc useing phreeqcinwt example found at
    https://github.com/avdudchenko/phreeqcinwt/blob/main/phreeqcinwt/examples/bench_mark_data_for_reaktoro_pse.py
    """
    path_rktpse = pathlib.Path(reaktoro_pse.__file__).parent.resolve()
    path = os.path.join(
        path_rktpse,
        "examples/reaktoro_pse_to_phreeqc_comparison/phreeqc_data.json",
    )
    with open(path) as json_data:
        data = json.load(json_data)
    return data


def create_folder(folder_name):

    path = pathlib.Path(__file__).parent.resolve()
    path_save = os.path.join(path, folder_name)
    if not os.path.exists(path_save):
        print("Creating path {path_save}")
        os.makedirs(path_save)
    return path_save


def plot_data_sets(
    xdata,
    phreeqc_data,
    reaktoro_output_dict,
    data_type,
    xlabel,
    save_fig=False,
    show_fig=False,
):
    fig, ax = plt.subplots()
    fig.set_dpi(300)
    fig.set_size_inches(3.25, 3.25, forward=True)
    colors = ["#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#ffff33"]
    errors = {}
    for i, key in enumerate(
        [
            "Calcite",
            "pH",
            "Osmotic pressure",
            "Vapor pressure",
            "formed phase Calcite",
            "formed phase Gypsum",
            "formed phase Anhydrite",
        ]
    ):
        if key in reaktoro_output_dict[data_type]:
            reaktor_data_array = np.array(reaktoro_output_dict[data_type][key])
            phreeqc_data_array = np.array(phreeqc_data[data_type][key])

            percent_dif = (
                (reaktor_data_array - phreeqc_data_array) / phreeqc_data_array * 100
            )
            errors[key] = np.average(np.abs(percent_dif))
            plot_result(
                xdata,
                reaktor_data_array,
                phreeqc_data_array,
                xlabel=xlabel,
                ylabel=key,
                sweep_name=data_type,
                save_fig=save_fig,
            )
            ax.plot(xdata, percent_dif, color=colors[i], label=key)
    ax.set_xlabel(xlabel)
    ax.set_ylabel("Property difference (%)")
    ax.legend(
        frameon=False,
        loc="best",
        prop={"size": 9},
        labelspacing=0.2,
        columnspacing=0.4,
        handlelength=1,
        handleheight=1,
    )
    save_loc = create_folder(data_type)
    if save_fig:
        fig.savefig(
            os.path.join(save_loc, f"Property difference.jpg"),
            dpi=300,
            bbox_inches="tight",
            pad_inches=0.1,
        )
    if show_fig:
        plt.show()
    plt.close()
    return errors


def plot_result(
    xdata,
    reaktoro_data,
    phreeqc_data,
    xlabel=None,
    ylabel=None,
    sweep_name=None,
    save_fig=False,
):
    fig, ax = plt.subplots()
    fig.set_dpi(300)
    fig.set_size_inches(3.25, 3.25, forward=True)
    ax.plot(xdata, reaktoro_data, color="red", label="reaktoro-pse")
    ax.plot(xdata, phreeqc_data, color="black", label="PHREEQC")
    ax.set_xlabel(xlabel)
    ax.set_ylabel(ylabel)
    ax.legend(
        frameon=False,
        loc="best",
        prop={"size": 9},
        labelspacing=0.2,
        columnspacing=0.4,
        handlelength=1,
        handleheight=1,
    )
    save_loc = create_folder(sweep_name)
    if save_fig:
        fig.savefig(
            os.path.join(save_loc, f"{ylabel}.jpg"),
            dpi=300,
            bbox_inches="tight",
            pad_inches=0.1,
        )


def get_reaktoro_solved_outputs(m, data_dict):
    in_out_dict = {}
    in_out_dict["Calcite"] = ("scalingTendency", "Calcite")
    in_out_dict["Gypsum"] = ("scalingTendency", "Gypsum")
    in_out_dict["pH"] = ("pH", None)
    in_out_dict["Vapor pressure"] = ("vaporPressure", "H2O(g)")
    in_out_dict["Osmotic pressure"] = ("osmoticPressure", "H2O")
    in_out_dict["formed phase Calcite"] = ("speciesAmount", "Calcite")
    in_out_dict["formed phase Gypsum"] = ("speciesAmount", "Gypsum")
    in_out_dict["formed phase Anhydrite"] = ("speciesAmount", "Anhydrite")
    for key, pyo_key in in_out_dict.items():
        if pyo_key in m.modified_properties:
            if key not in data_dict:
                data_dict[key] = []
            data_dict[key].append(m.modified_properties[pyo_key].value)
